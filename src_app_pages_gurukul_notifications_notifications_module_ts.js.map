{"version":3,"file":"src_app_pages_gurukul_notifications_notifications_module_ts.js","mappings":"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","sources":["./src/app/constants/fb-collections.ts","./src/app/pages/gurukul/notifications/notifications-routing.module.ts","./src/app/pages/gurukul/notifications/notifications.module.ts","./src/app/pages/gurukul/notifications/notifications.page.ts","./src/app/services/data/data.service.ts"],"sourcesContent":["export class FirebaseCollections {\n    public static COURSES = 'courses';\n    public static ORDERS = 'orders';\n    public static STUDENTS = 'students';\n    public static TESTS = 'tests';\n    public static MEDIA = 'media';\n    public static SCHEDULES = 'schedules';\n    public static QUESTION_PAPERS = 'question_papers';\n    public static VALUED_ANSWER_SHEET = 'valued_answer_sheets';\n    public static ANSWER_SHEET = 'answer_sheets';\n    public static STUDENT_ACTIVITY = 'student_activity';\n    public static NOTIFICATIONS = 'notifications';\n    public static CHAT_ROOM = 'chat_room';\n    public static MESSAGES = 'messages';\n};\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NotificationsPage } from './notifications.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NotificationsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NotificationsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { NotificationsPageRoutingModule } from './notifications-routing.module';\n\nimport { NotificationsPage } from './notifications.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    NotificationsPageRoutingModule\n  ],\n  declarations: [NotificationsPage]\n})\nexport class NotificationsPageModule {}\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\nimport { FirebaseCollections } from 'src/app/constants/fb-collections';\nimport { AuthService } from 'src/app/services/auth/auth.service';\nimport { CommonService } from 'src/app/services/common/common.service';\nimport { DataService } from 'src/app/services/data/data.service';\nimport { StateService } from 'src/app/services/state/state.service';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.page.html',\n  styleUrls: ['./notifications.page.scss'],\n})\nexport class NotificationsPage implements OnInit {\n\n  public notifications: Array<any> = [];\n\n  constructor(\n    private dataService: DataService,\n    private cd: ChangeDetectorRef,\n  ) {\n    this.dataService.getNotifications().subscribe(res => {\n      this.notifications = res;\n      this.cd.detectChanges();\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  ionViewWillEnter() {\n    this.readNotitifications();\n  }\n\n  readNotitifications() {\n    this.dataService.getUnreadNotifications().subscribe(res => {\n      res.forEach(notification => {\n        this.dataService.update(FirebaseCollections.NOTIFICATIONS, { status: 'read', id: notification.id }).then(resp => {\n          //\n        }, err => {\n          console.error('Error while updating notification status:::::::::;\\n', err);\n        });\n      });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  collectionData,\n  doc,\n  docData,\n  addDoc,\n  deleteDoc,\n  updateDoc,\n  serverTimestamp,\n  query,\n  where,\n  DocumentData,\n  arrayRemove,\n  arrayUnion,\n  orderBy\n} from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { FirebaseCollections } from 'src/app/constants/fb-collections';\nimport { Course, Test, Order } from 'src/app/models/course.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(\n    private firestore: Firestore\n  ) { }\n\n\n  /**\n   * @description Firebase Data\n   */\n  get(collectionName: string): Observable<any[]> {\n    const ref = collection(this.firestore, collectionName);\n    const queryRef = query(ref, orderBy('created_at', 'asc'));\n    return collectionData(queryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  getById(collectionName: string, id: string): Observable<any> {\n    const docRef = doc(this.firestore, collectionName + `/${id}`);\n    return docData(docRef, { idField: 'id' }) as Observable<any>;\n  }\n\n  getByUID(collectionName: string, uid: string) {\n    console.log(collectionName, uid);\n    const ref = collection(this.firestore, collectionName);\n    const queryRef = query(ref, where('uid', '==', uid), orderBy('created_at', 'asc'));\n    return collectionData(queryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  add(collectionName: string, data: any) {\n    const ref = collection(this.firestore, collectionName);\n    return addDoc(ref, { ...data, created_at: serverTimestamp() });\n  }\n\n  delete(collectionName: string, data: any) {\n    const docRef = doc(this.firestore, collectionName + `/${data.id}`);\n    return collectionName === FirebaseCollections.MEDIA || collectionName === FirebaseCollections.MEDIA ?\n      updateDoc(docRef, { media: arrayRemove(data?.media), updated_at: serverTimestamp() }) :\n      deleteDoc(docRef);\n  }\n\n  update(collectionName: string, data: any) {\n    const docRef = doc(this.firestore, collectionName + `/${data.id}`);\n    return collectionName === FirebaseCollections.MEDIA || collectionName === FirebaseCollections.MEDIA ?\n      updateDoc(docRef, { media: arrayUnion(...data?.media), updated_at: serverTimestamp() }) :\n      updateDoc(docRef, { ...data, updated_at: serverTimestamp() });\n  }\n\n  /**\n   * @description Course Data\n   */\n  getCourses(): Observable<Course[]> {\n    const coursesRef = collection(this.firestore, 'courses');\n    return collectionData(coursesRef, { idField: 'id' }) as Observable<Course[]>;\n  }\n\n  getCourseById(id): Observable<Course> {\n    const courseDocRef = doc(this.firestore, `courses/${id}`);\n    return docData(courseDocRef, { idField: 'id' }) as Observable<Course>;\n  }\n\n  addCourse(course: Course) {\n    const coursesRef = collection(this.firestore, 'courses');\n    return addDoc(coursesRef, { ...course, created_at: serverTimestamp() });\n  }\n\n  deleteCourse(courseId: string) {\n    const courseDocRef = doc(this.firestore, `courses/${courseId}`);\n    return deleteDoc(courseDocRef);\n  }\n\n  updateCourse(courseId: string, course: any) {\n    const courseDocRef = doc(this.firestore, `courses/${courseId}`);\n    return updateDoc(courseDocRef, { ...course, updated_at: serverTimestamp() });\n  }\n\n  /**\n   * @description Test Data\n   */\n  getTests(courseId: string): Observable<Test[]> {\n    const testsRef = collection(this.firestore, 'tests',);\n    const testQueryRef = query(testsRef, where('course_id', '==', courseId || ''));\n    return collectionData(testQueryRef, { idField: 'id' }) as Observable<Test[]>;\n  }\n\n  getAnswerSheets(testId: any): Observable<any[]> {\n    const answerSheetRef = collection(this.firestore, FirebaseCollections.ANSWER_SHEET);\n    const scheduleQueryRef = query(answerSheetRef, where('test_id', '==', testId || ''));\n    return collectionData(scheduleQueryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  getValuedAnswerSheet(testId: any): Observable<any[]> {\n    const answerSheetRef = collection(this.firestore, FirebaseCollections.VALUED_ANSWER_SHEET);\n    const scheduleQueryRef = query(answerSheetRef, where('test_id', '==', testId || ''));\n    return collectionData(scheduleQueryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  getRemarksByTestId(testId: string, studentId: string): Observable<any[]> {\n    const scheduleRef = collection(this.firestore, FirebaseCollections.STUDENT_ACTIVITY);\n    const scheduleQueryRef = query(scheduleRef, where('test_id', '==', testId || ''), where('student_id', '==', studentId || ''));\n    return collectionData(scheduleQueryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  getScheduleByCourseId(courseId: string): Observable<any[]> {\n    const scheduleRef = collection(this.firestore, FirebaseCollections.SCHEDULES);\n    const scheduleQueryRef = query(scheduleRef, where('course_id', '==', courseId));\n    return collectionData(scheduleQueryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  getScheduleByTestId(testId: string): Observable<any[]> {\n    const scheduleRef = collection(this.firestore, FirebaseCollections.SCHEDULES);\n    const scheduleQueryRef = query(scheduleRef, where('test_id', '==', testId || ''));\n    return collectionData(scheduleQueryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  getQuestionPaperByTestId(testId: string): Observable<any[]> {\n    const questionPapersRef = collection(this.firestore, FirebaseCollections.QUESTION_PAPERS);\n    const questionPapersQueryRef = query(questionPapersRef, where('test_id', '==', testId || ''));\n    return collectionData(questionPapersQueryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  getTestById(id): Observable<Test> {\n    const testDocRef = doc(this.firestore, `tests/${id}`);\n    return docData(testDocRef, { idField: 'id' }) as Observable<Test>;\n  }\n\n  addTest(test: Test): DocumentData {\n    const testsRef = collection(this.firestore, 'tests');\n    return addDoc(testsRef, { ...test, created_at: serverTimestamp() });\n  }\n\n  deleteTest(test: Test) {\n    const testDocRef = doc(this.firestore, `tests/${test.id}`);\n    return deleteDoc(testDocRef);\n  }\n\n  updateTest(testId: string, test: any) {\n    const testDocRef = doc(this.firestore, `tests/${testId}`);\n    return updateDoc(testDocRef, { ...test, updated_at: serverTimestamp() });\n  }\n\n  /**\n   * @description Order Data\n   */\n  getOrders(): Observable<Order[]> {\n    const orderDocRef = collection(this.firestore, 'orders');\n    return collectionData(orderDocRef, { idField: 'id' }) as Observable<Order[]>;\n  }\n\n  getActiveOrdersWithStudentId(studentId: string): Observable<any[]> {\n    const scheduleRef = collection(this.firestore, FirebaseCollections.ORDERS);\n    const scheduleQueryRef = query(scheduleRef, where('student_id', '==', studentId || ''), where('status', '==', true));\n    return collectionData(scheduleQueryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  getOrderById(id): Observable<Course> {\n    const orderDocRef = doc(this.firestore, `orders/${id}`);\n    return docData(orderDocRef, { idField: 'id' }) as Observable<Course>;\n  }\n\n  addOrder(order: Order) {\n    const orderDocRef = collection(this.firestore, 'orders');\n    return addDoc(orderDocRef, { ...order, created_at: serverTimestamp() });\n  }\n\n  deleteOrder(order: Order) {\n    const orderDocRef = doc(this.firestore, `orders/${order.id}`);\n    return deleteDoc(orderDocRef);\n  }\n\n  updateOrder(course: any) {\n    const orderDocRef = doc(this.firestore, `orders/${course.id}`);\n    return updateDoc(orderDocRef, { ...course, updated_at: serverTimestamp() });\n  }\n\n  /**\n   * @description Order Data\n   */\n  getRegisteredStudents(): Observable<any[]> {\n    const studentRef = collection(this.firestore, FirebaseCollections.STUDENTS);\n    return collectionData(studentRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  getSubscribedStudents(): Observable<any[]> {\n    const studentRef = collection(this.firestore, FirebaseCollections.STUDENTS);\n    return collectionData(studentRef, { idField: 'id' }) as Observable<any[]>;\n    // const questionPapersRef = collection(this.firestore, FirebaseCollections.STUDENTS);\n    // const questionPapersQueryRef = query(questionPapersRef, where('test_id', '==', testId || ''));\n    // return collectionData(questionPapersQueryRef, { idField: 'id' }) as Observable<any[]>;\n  }\n\n  /**\n   * @description Notifications Data\n   */\n  getNotifications(): Observable<Course[]> {\n    const coursesRef = collection(this.firestore, FirebaseCollections.NOTIFICATIONS);\n    return collectionData(coursesRef, { idField: 'id' }) as Observable<Course[]>;\n  }\n\n  getUnreadNotifications(): Observable<Course[]> {\n    const testsRef = collection(this.firestore, FirebaseCollections.NOTIFICATIONS);\n    const testQueryRef = query(testsRef, where('status', '==', 'unread'));\n    return collectionData(testQueryRef, { idField: 'id' }) as Observable<Test[]>;\n  }\n\n  /**\n   * @description Chat Data\n   */\n  getChats(): Observable<Course[]> {\n    const chatRef = collection(this.firestore, FirebaseCollections.CHAT_ROOM);\n    const chatQueryRef = query(chatRef, orderBy('updated_at', 'desc'));\n    return collectionData(chatQueryRef, { idField: 'id' }) as Observable<Test[]>;\n  }\n\n  getMessages(chatId: string): Observable<Course[]> {\n    const messageRef = collection(this.firestore, FirebaseCollections.MESSAGES);\n    const messageQueryRef = query(messageRef, where('chat_id', '==', chatId), orderBy('created_at', 'asc'));\n    return collectionData(messageQueryRef, { idField: 'id' }) as Observable<Test[]>;\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}